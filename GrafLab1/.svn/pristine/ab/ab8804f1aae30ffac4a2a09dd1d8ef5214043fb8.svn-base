using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GrafLab1
{
    class Graf
    {
        private List<List<Boolean>> graf = new List<List<Boolean>>();
        private int size = 0;// количество точек
        private GrafDecart grafDecart;// кооординаты точек
        public int contractionDot = -1;


        public void setGrafDecart(GrafDecart grafDecart)
        {
            this.grafDecart = grafDecart;
        }

        public GrafDecart getGrafDecart()
        {
            return this.grafDecart;
        }

        public Graf(int size)
        {
            this.createGraf(size);
        }

        public void setSize(int size)
        {
            this.size = size;
        }

        public int getSize()
        {
            return this.size;
        }

        //получение координаты точки
        public Coordinates getCoordinatePoint(int number)
        {
            int numberBuf = number +1;
            if (this.getGrafDecart().getCoordinateDot(numberBuf) != null)
                return new Coordinates(true,new DecartCoordinates(this.getGrafDecart().getCoordinateDot(numberBuf).getX(), this.getGrafDecart().getCoordinateDot(numberBuf).getY()),null );
            else
            {
                return null;
            }
        }

        //операция объединения
        public static Graf operator +(Graf graf1, Graf graf2)
        {
            Graf graf = graf1.getSize()>graf2.getSize()?new Graf(graf1.getCountPoint(graf2.getGrafDecart())):new Graf(graf2.getCountPoint(graf1.getGrafDecart()));
            
             //заполняю координаты в пространстве
            int grafDecartX = graf1.getGrafDecart().getSizeDecartGrafMatrixX() >
                              graf2.getGrafDecart().getSizeDecartGrafMatrixX()
                                  ? graf1.getGrafDecart().getSizeDecartGrafMatrixX()
                                  : graf2.getGrafDecart().getSizeDecartGrafMatrixX();
            int grafDecartY = graf1.getGrafDecart().getSizeDecartGrafMatrixY() >
                              graf2.getGrafDecart().getSizeDecartGrafMatrixY()
                                  ? graf1.getGrafDecart().getSizeDecartGrafMatrixY()
                                  : graf2.getGrafDecart().getSizeDecartGrafMatrixY();

            GrafDecart grafDecart = new GrafDecart(grafDecartX,grafDecartY,false);
            for (int y = 0; y < graf2.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf2.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    grafDecart.setGrafMatrixDecart(x,y, graf2.getGrafDecart().getElementDecartGraf(x, y));
                }
            }

            for (int y = 0; y < graf1.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf1.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    if (grafDecart.getElementDecartGraf(x,y)==0)
                    {
                        grafDecart.setGrafMatrixDecart(x, y, graf1.getGrafDecart().getElementDecartGraf(x, y)>0?grafDecart.findLastDot()+1:0);  
                    }
                    
                }
            }
            graf.setGrafDecart(grafDecart);

//заполняю грани в пространстве
            for (int y = 0; y < graf2.getSize(); y++)
            {
                for (int x = 0; x < graf2.getSize(); x++)
                {
                    if (graf2.getCoordinates(x, y))
                    {
                        graf.setCoordinates(x, y,true);
                    }
                }
            }

            for (int y = 0; y < graf1.getGraf().Count; y++)
            {
                for (int x = 0; x < graf1.getGraf().Count; x++)
                {
                    if (graf1.getCoordinates(x, y))
                    {
                        graf.setCoordinates(graf.getGrafDecart().getElementDecartGraf(graf1.getCoordinatePoint(x).getStartCoordinate().getX(),
                            graf1.getCoordinatePoint(x).getStartCoordinate().getY())-1,
                                                                  graf.getGrafDecart().getElementDecartGraf(
                                                                    graf1.getCoordinatePoint(y).getStartCoordinate().getX(),
                                                                    graf1.getCoordinatePoint(y).getStartCoordinate().getY())-1, true);

                    }
                }
            }

            return graf;

        }



        /// <summary>
        /// операции соединения
        /// </summary>
        /// <param name="graf1"></param>
        /// <param name="graf2"></param>
        /// <returns></returns>
        public static Graf operator *(Graf graf1,Graf graf2)
        {
            Graf graf = graf1 + graf2;

            for (int y = 0; y < graf1.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf1.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    if (graf1.getGrafDecart().getElementDecartGraf(x,y)>0)
                    {
                        int nameDot1 = graf.getGrafDecart().getElementDecartGraf(x, y)-1;
                        for (int y1 = 0; y1 < graf2.getGrafDecart().getSizeDecartGrafMatrixY(); y1++)
                        {
                            for (int x1 = 0; x1 < graf2.getGrafDecart().getSizeDecartGrafMatrixX(); x1++)
                            {
                                if (graf2.getGrafDecart().getElementDecartGraf(x1,y1)>0)
                                {
                                    int nameDot2 = graf.getGrafDecart().getElementDecartGraf(x1, y1)-1;
                                    graf.setCoordinates(nameDot1,nameDot2,true);
                                }
                            }
                        }
                    }
                }
            }
            return graf;
        }

/// <summary>
/// операция дополнения
/// </summary>
/// <param name="grafForAdditional"></param>
/// <returns></returns>
     public static Graf operator ++(Graf grafForAdditional)
     {
         Graf graf = grafForAdditional;
         for (int y = 0; y < graf.getGraf().Count; y++)
         {
             for (int x = 0; x < graf.getGraf().Count; x++)
             {
                     graf.setCoordinates(x, y, !graf.getCoordinates(x, y));
             }
         }
         return graf;
     }

        /// <summary>
        /// операция сведения графа
        /// </summary>
        /// <param name="grafForContraction"></param>
        /// <returns></returns>
        public Graf contraction(Graf grafForContraction, List<int> itemForContraction)
        {
            
            Graf graf = grafForContraction;

            contractionDot = itemForContraction[0];
           /* for (int y = 0; y < graf.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    if (graf.getGrafDecart().getElementDecartGraf(x,y)>0)
                    {*/
                        for (int y1 = 0; y1 < graf.getGraf().Count; y1++)
                        {
                            for (int x1 = 0; x1 < graf.getGraf().Count(); x1++)
                            {
                                if (graf.getCoordinates(x1,y1))
                                {
                                    for (int i = 1; i < itemForContraction.Count; i++)
                                    {
                                        if (itemForContraction[i]==x1+1 || itemForContraction[i]==y1+1)
                                        {
                                           // graf.setCoordinates(x1,y1,false);
                                            if (itemForContraction[i] == x1+1 && itemForContraction[i] == y1+1)
                                            {
                                                graf.setCoordinates(x1, y1, false);
                                            }
                                            else
                                            {
                                                if (itemForContraction[i] == x1+1)
                                                {
                                                    graf.setCoordinates(x1, contractionDot, true);
                                                }
                                                else
                                                {
                                                    if (itemForContraction[i] == y1+1)
                                                    {
                                                        graf.setCoordinates(contractionDot, y1, true);
                                                    }
                                                }
                                            }
                                            
                                        }
                                    }
                                }
                            }
                        }
//                    }
//                }
//            }

            //удаляю лишние точки
            for (int y = 0; y < graf.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    if (graf.getGrafDecart().getElementDecartGraf(x, y) > 0)
                    {
                        for (int i = 1; i < itemForContraction.Count; i++)
                        {
                            if (itemForContraction[i] == graf.getGrafDecart().getElementDecartGraf(x, y) )
                            {
                                graf.getGrafDecart().setGrafMatrixDecart(x,y,0);
                            }
                        }
                    }
                }
            }

            //переписываю матрицу смежности с новыми точками
            List<int> mergeDot = new List<int>();//таблица соотношения текущих точек с точками новой матрицы смежности
            
            for (int i = 0; i<graf.getGraf().Count;i++)
                mergeDot.Add(0);
           
            //переписываю имена точек которые удалил
            int nameDot = 0; //имя перезаписываемой точки
            for (int y = 0; y < graf.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    if (graf.getGrafDecart().getElementDecartGraf(x, y) > 0)
                    {
                        nameDot++;
                       
                        //graf.getGrafDecart().setGrafMatrixDecart(x, y, nameDot); 
                        mergeDot[graf.getGrafDecart().getElementDecartGraf(x, y)-1]=nameDot;
                    }
                }
            }

            //переписываю матрицу смежности

            //создал матрицу смежности для дальнейшего заполнения
            List<List<Boolean>> grafBuf = new List<List<bool>>();
            for (int i = 0; i < graf.getGrafDecart().count(); i++)
            {
                List<Boolean> grafBufBuf = new List<bool>();
                for (int j = 0; j < graf.getGrafDecart().count(); j++)
                {
                    grafBufBuf.Add(false);
                }
                grafBuf.Add(grafBufBuf);
            }
            
            //заполняю матрицу смежности со сдвигом точек по созданной маске

            
            for (int y = 0; y < graf.getGraf().Count; y++)
            {
                for (int x = 0; x < graf.getGraf().Count; x++)
                {
                   if (graf.getCoordinates(x,y))
                   {
                       for (int i = 1; i < itemForContraction.Count; i++)
                       {
                           /*if (itemForContraction[i] != x && itemForContraction[i] != y)
                           {*/
                               if (mergeDot[x]!=0 && mergeDot[y]!=0)
                               {
                                   grafBuf[mergeDot[x] - 1][mergeDot[y] - 1] = true; 
                               }
                               
//                           }
                       }
                       
                   }
                }
            }
            graf.setGraf(grafBuf);


            //переписываю имена точек которые удалил
            int nameDot1 = 0; //имя перезаписываемой точки
            for (int y = 0; y < graf.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    if (graf.getGrafDecart().getElementDecartGraf(x, y) > 0)
                    {
                        nameDot1++;
                        if (graf.getGrafDecart().getElementDecartGraf(x, y) == contractionDot)
                        {
                            contractionDot = nameDot1;
                        }
                        graf.getGrafDecart().setGrafMatrixDecart(x, y, nameDot1); 
                    }

                }
            }
            return graf;
        }

       
        public Graf(GrafDecart grafDecart)
        {
            setGrafDecart(grafDecart);
            createGraf(getGrafDecart());
        }
        public Graf() { 
        }
        /// <summary>
        /// генерит связанный граф
        /// </summary>
        /// <param name="grafDecart"></param>
        /// <param name="countDot"></param>
        /// <param name="countEdge"></param>
        public Graf(GrafDecart grafDecart, int countDot,int countEdge)
        {
            
        }

        public List<List<Boolean>> getGraf()
        {
            return this.graf;
        }
        public void setGraf(List<List<Boolean>> graf)
        {
            this.graf = graf;
        }

        /// <summary>
        /// получение элемента матрицы смежности
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        public Boolean getCoordinates(int x, int y)
        {
            return this.graf[x][y];
        }

        public void setCoordinates(int x, int y, Boolean hasDot)
        {
            this.graf[x][y] = hasDot;
        }

        /// <summary>
        /// генераци ребер графа 
        /// </summary>
        private void createGraf(GrafDecart grafDecard)
        {
            Random random = new Random();
            this.setSize(grafDecard.count());
            for (int y = 0; y < grafDecard.count(); y++)
            {
                List<Boolean> bufGrafMatrix = new List<Boolean>();
                for (int x = 0; x < grafDecard.count(); x++)
                {
                    Boolean hasLink = false;
                    int edgeGraf = random.Next(2);
                    if (edgeGraf == 1)
                    {
                        hasLink = true;
                    }
                    
                    bufGrafMatrix.Add(hasLink);

                }
                graf.Add(bufGrafMatrix);
            }
        }

        /// <summary>
        /// создает грав заданного размера(пустой граф)
        /// </summary>
        /// <param name="size"></param>

        private void createGraf(int size)
        {
            for (int y = 0 ; y< size ; y++)
            {
                List<Boolean> bufGrafMatrix = new List<Boolean>();
                for (int x = 0; x<size; x++)
                {
                    bufGrafMatrix.Add(false);
                }
                this.graf.Add(bufGrafMatrix);
            }
            
        }

        public  Graf setWith (Graf graf)
    {
            
            Graf graf1 = new Graf(graf.getGrafDecart().count());

            //заполняю координаты в пространстве
            GrafDecart grafDecart = new GrafDecart(graf.getGrafDecart().getSizeDecartGrafMatrixX(), graf.getGrafDecart().getSizeDecartGrafMatrixY(), false);
            for (int y = 0; y < graf.getGrafDecart().getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < graf.getGrafDecart().getSizeDecartGrafMatrixX(); x++)
                {
                    grafDecart.setGrafMatrixDecart(x, y, graf.getGrafDecart().getElementDecartGraf(x, y));
                }
            }
            graf1.setGrafDecart(grafDecart);

            //заполняю грани в пространстве
            for (int y = 0; y < graf.getSize(); y++)
            {
                for (int x = 0; x < graf.getSize(); x++)
                {
                    
                        graf1.setCoordinates(x, y, graf.getCoordinates(x,y));
                    
                }
            }
            return graf1;

    }
      /// <summary>
        /// получение количкство точек на декартовой поверхности от двух пространственных 
      /// </summary>
      /// <param name="grafDecart"></param>
      /// <returns></returns>
        public int getCountPoint(GrafDecart grafDecart)
        {
            int count = getGrafDecart().count();
            for (int y = 0; y < grafDecart.getSizeDecartGrafMatrixY(); y++)
            {
                for (int x = 0; x < grafDecart.getSizeDecartGrafMatrixX(); x++)
                {
                    if (grafDecart.getElementDecartGraf(x,y)>0)
                    {
                        if (this.grafDecart.getSizeDecartGrafMatrixX()<=grafDecart.getSizeDecartGrafMatrixX() && this.grafDecart.getSizeDecartGrafMatrixY()<=grafDecart.getSizeDecartGrafMatrixY())
                        {
                            if (this.grafDecart.getElementDecartGraf(x, y) == 0)
                            {
                                count++;
                            }
                        }
                    }
                }                
            }
            return count;
        }
    }
}
